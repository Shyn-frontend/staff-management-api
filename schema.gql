# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserPermissionDto {
  name: String!
  action: String!
}

type UserRoleDto {
  id: String!
  name: String!
  permissions: [UserPermissionDto!]!
}

type UserDepartmentDto {
  id: String!
  name: String!
  isBillable: Boolean!
}

type UserPositionDto {
  id: String!
  name: String!
  department: UserDepartmentDto!
}

type AuthUserDto {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  email: String
  name: String
  type: String!
  position: UserPositionDto!
  role: UserRoleDto!
  avatar: String
  isArchived: Boolean!
  permanentLeaveAt: DateTime
  isComplete: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ManagerDto {
  id: String!
  name: String!
  avatar: String!
}

type DepartmentDto {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  name: String!
  isBillable: Boolean!
  manager: ManagerDto!
}

type PositionDto {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  name: String!
  department: DepartmentDto!
}

type PermissionDto {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  name: String!
  action: String!
}

type RoleDto {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  name: String!
  order: Float!
  permissions: [PermissionDto!]!
}

type UserMetaDto {
  key: String!
  value: String!
}

type UserDto {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime!
  email: String
  name: String
  metas: [UserMetaDto!]!
  type: String!
  position: PositionDto!
  role: RoleDto!
  avatar: String
  isArchived: Boolean!
  permanentLeaveAt: DateTime!
  isComplete: Boolean!
  isPermanent: Boolean!
}

type AccessTokenDto {
  type: String!
  accessToken: String!
}

type LoginResultDto {
  user: AuthUserDto!
  token: AccessTokenDto!
}

type Query {
  departments: [DepartmentDto!]!
  getUser(id: String!): UserDto!
}

type Mutation {
  createDepartment(data: CreateDepartmentParamsDto!): DepartmentDto!
  updateUserLogged(data: UpdateUserParamsDto!): UserDto!
  createPosition(position: CreatePositionParamsDto!): PositionDto!
  login(data: LoginParamsDto!): LoginResultDto!
  register(data: RegisterParamsDto!): String!
  changePassword(data: ChangePasswordParamsDto!): String!
  completeProfile(data: CompleteProfileParamsDto!): LoginResultDto!
}

input CreateDepartmentParamsDto {
  name: String!
  managerId: String!
  isBillable: Boolean!
}

input UpdateUserParamsDto {
  name: String
  email: String
  avatar: String
  positionId: String
  roleId: String
  isPermanent: Boolean
  employeeNo: String
  contractStart: String
  contractEnd: String
}

input CreatePositionParamsDto {
  name: String!
  departmentId: String!
}

input LoginParamsDto {
  email: String!
  password: String!
}

input RegisterParamsDto {
  email: String!
  password: String!
}

input ChangePasswordParamsDto {
  oldPassword: String!
  newPassword: String!
  confirmPassword: String!
}

input CompleteProfileParamsDto {
  name: String!
  password: String!
  email: String!
}
